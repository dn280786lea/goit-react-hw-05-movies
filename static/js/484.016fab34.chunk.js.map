{"version":3,"file":"static/js/484.016fab34.chunk.js","mappings":"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","sources":["components/API/API.jsx","pages/Movie/Movie.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst key = '6b4b55eef0881e4377ffe1c06efc2931';\nconst BASE_IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const getTrending = async () => {\n  try {\n    const res = await axios.get(`/trending/movie/day?api_key=${key}`);\n    return res.data;\n  } catch (error) {\n    throw new Error(`Error fetching trending movies: ${error.message}`);\n  }\n};\n\nexport const searchMovies = async query => {\n  try {\n    const res = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${key}&query=${query}`\n    );\n    return res.data;\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n\nexport const searchCredits = async id => {\n  try {\n    const res = await axios.get(\n      `${BASE_URL}/movie/${id}/credits?api_key=${key}`\n    );\n    return res.data;\n  } catch (error) {\n    console.error(error.message);\n  }\n};\nexport const searchRewie = async id => {\n  try {\n    const res = await axios.get(\n      `${BASE_URL}/movie/${id}/reviews?api_key=${key}`\n    );\n    return res.data;\n  } catch (error) {\n    console.error(error.message);\n  }\n};\nexport const getMovieDetails = async id => {\n  try {\n    const res = await axios.get(`${BASE_URL}/movie/${id}?api_key=${key}`);\n    return res.data;\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n\nexport { BASE_URL, key, BASE_IMAGE_URL };\n","import React, { useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { searchMovies } from '../../components/API/API';\nimport {} from './Movie.css';\n\nconst MovieSearch = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchResults, setSearchResults] = useState([]);\n  const [error, setError] = useState('');\n  const location = useLocation();\n  const query = searchParams.get('query') || '';\n  const defaultImg =\n    'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\n  const handleSearchSubmit = async evt => {\n    evt.preventDefault();\n\n    try {\n      const movies = await searchMovies(query);\n      setSearchResults(movies.results || []);\n      setError('');\n\n      setSearchParams({ query });\n    } catch (error) {\n      console.error('Failed to fetch movies:', error.message);\n      setSearchResults([]);\n      setError('Failed to fetch movies. Please try again.');\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"form-container\">\n        <form onSubmit={handleSearchSubmit} className=\"form\">\n          <input\n            onChange={evt => setSearchParams({ query: evt.target.value })}\n            placeholder=\"search\"\n            name=\"search\"\n            type=\"text\"\n            autoComplete=\"off\"\n            value={query}\n            className=\"input\"\n          />\n          <button className=\"button\" type=\"submit\">\n            Search\n          </button>\n        </form>\n      </div>\n\n      {error && <h3>{error}</h3>}\n      <ul className=\"MovieGallery\">\n        {searchResults.map(movie => (\n          <li className=\"MovieGalleryList\" key={movie.id}>\n            <Link\n              className=\"MovieLink\"\n              state={{ from: location }}\n              to={`/movie/${movie.id}`}\n            >\n              <img\n                src={\n                  movie.poster_path\n                    ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n                    : defaultImg\n                }\n                width={250}\n                alt=\"poster\"\n              />\n              <span className=\"movie-title\">{movie.title}</span>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default MovieSearch;\n"],"names":["BASE_URL","key","BASE_IMAGE_URL","axios","getTrending","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","res","_context","prev","next","concat","sent","abrupt","data","t0","Error","message","stop","apply","arguments","searchMovies","_ref2","_callee2","query","_context2","console","error","_x","searchCredits","_ref3","_callee3","id","_context3","_x2","searchRewie","_ref4","_callee4","_context4","_x3","getMovieDetails","_ref5","_callee5","_context5","_x4","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","setSearchParams","_useState","useState","_useState2","searchResults","setSearchResults","_useState3","_useState4","setError","location","useLocation","get","handleSearchSubmit","evt","movies","preventDefault","results","_jsxs","children","_jsx","className","onSubmit","onChange","target","value","placeholder","name","type","autoComplete","map","movie","Link","state","from","to","src","poster_path","width","alt","title"],"sourceRoot":""}